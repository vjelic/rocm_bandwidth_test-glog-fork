# Copyright (c) 2023-2024 Advanced Micro Devices, Inc. All rights reserved.

if (DEFINED ENV{ROCM_PATH})
    set(ROCM_PATH "$ENV{ROCM_PATH}" CACHE STRING "ROCm install directory")
else()
    set(ROCM_PATH "/opt/rocm" CACHE STRING "ROCm install directory")
endif()
cmake_minimum_required(VERSION 3.5)

project(TransferBench VERSION 1.59.00 LANGUAGES CXX)
option(BUILD_TRANSFER_BENCH_TOOL        "Build the executable TransferBench Tool"   OFF)
option(BUILD_TRANSFER_BENCH_SHARED_LIB  "Build the shared library (libamd_tb.so)"   ON)

# Default GPU architectures to build
#==================================================================================================
set(DEFAULT_GPUS
      gfx906
      gfx908
      gfx90a
      gfx942
      gfx1030
      gfx1100
      gfx1101
      gfx1102
      gfx1200
      gfx1201)

# Build only for local GPU architecture
if (BUILD_LOCAL_GPU_TARGET_ONLY)
  message(STATUS "Building only for local GPU target")
  if (COMMAND rocm_local_targets)
    rocm_local_targets(DEFAULT_GPUS)
  else()
    message(WARNING "Unable to determine local GPU targets. Falling back to default GPUs.")
  endif()
endif()

# Determine which GPU architectures to build for
set(GPU_TARGETS "${DEFAULT_GPUS}" CACHE STRING "Target default GPUs if GPU_TARGETS is not defined.")

# Check if clang compiler can offload to GPU_TARGETS
if (COMMAND rocm_check_target_ids)
  message(STATUS "Checking for ROCm support for GPU targets: " "${GPU_TARGETS}")
  rocm_check_target_ids(SUPPORTED_GPUS TARGETS ${GPU_TARGETS})
else()
  message(WARNING "Unable to check for supported GPU targets. Falling back to default GPUs.")
  set(SUPPORTED_GPUS ${DEFAULT_GPUS})
endif()

set(COMPILING_TARGETS "${SUPPORTED_GPUS}" CACHE STRING "GPU targets to compile for.")
message(STATUS "Compiling for ${COMPILING_TARGETS}")

foreach(target ${COMPILING_TARGETS})
 list(APPEND static_link_flags --offload-arch=${target})
endforeach()
list(JOIN static_link_flags " " flags_str)
set( CMAKE_CXX_FLAGS "${flags_str} ${CMAKE_CXX_FLAGS}")

set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -L${ROCM_PATH}/lib")
include_directories(${ROCM_PATH}/include)
find_library(IBVERBS_LIBRARY ibverbs)
if (IBVERBS_LIBRARY)
    if (DEFINED ENV{DISABLE_NIC_EXEC})
        message(STATUS "Disabling NIC Executor support")
    else()
        message(STATUS "Found ibverbs: ${IBVERBS_LIBRARY}.  Building with NIC executor support. Can set DISABLE_NIC_EXEC=1 to disable")
        add_definitions(-DNIC_EXEC_ENABLED)
        link_libraries(ibverbs)
    endif()
else()
    message(WARNING "IBVerbs library not found.  Building without NIC executor support")
endif()
link_libraries(numa hsa-runtime64 pthread)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY .)

if (BUILD_TRANSFER_BENCH_SHARED_LIB)
    set (TBLIB_TARGET_NAME "amd_tb")
    message(WARNING "  >>TBCMAKE_BUILD_LIB=ON")
    set (TB_TARGET_NAME ${TBLIB_TARGET_NAME})
    add_library(${TBLIB_TARGET_NAME} SHARED src/Client.cpp)
    set_target_properties(${TBLIB_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
    add_custom_command(
        TARGET ${TBLIB_TARGET_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy "lib${TBLIB_TARGET_NAME}.so" "../../deps/lib${TBLIB_TARGET_NAME}.so"
        COMMENT "Copying lib${TBLIB_TARGET_NAME}.so to ../../deps/lib${TBLIB_TARGET_NAME}.so"
    )
endif()

if (BUILD_TRANSFER_BENCH_TOOL)
    set (TB_TARGET_NAME "TransferBench")
    add_executable(${TB_TARGET_NAME} src/Client.cpp)
endif()    
set(AMD_WORK_BENCH_INTERNAL_COMMON_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/../../../deps/work_bench/include/awb/internal/common)
set(AMD_WORK_BENCH_INTERNAL_PLUGINS_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/../../../deps/work_bench/include/awb/internal/plugins)
#target_include_directories(${TB_TARGET_NAME} PRIVATE ../../common/tb_engine/include include include/Presets)
target_include_directories(${TB_TARGET_NAME} PRIVATE ${AMD_WORK_BENCH_INTERNAL_COMMON_INCLUDE_DIRS} include include/Presets)

find_package(ROCM 0.8 REQUIRED PATHS ${ROCM_PATH})
include(ROCMInstallTargets)
include(ROCMCreatePackage)
set(ROCMCHECKS_WARN_TOOLCHAIN_VAR OFF)

set(PACKAGE_NAME TB)
set(LIBRARY_NAME ${TB_TARGET_NAME})

rocm_install(TARGETS ${TB_TARGET_NAME} COMPONENT devel)
rocm_package_add_dependencies(DEPENDS numactl hsa-rocr)
rocm_create_package(
    NAME ${LIBRARY_NAME}
    DESCRIPTION "TransferBench package"
    MAINTAINER "RCCL Team <gilbert.lee@amd.com>"
)

